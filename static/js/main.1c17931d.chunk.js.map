{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/FilterContact/filterContact.js","components/App/App.jsx","index.js","components/ContactList/contactList.module.css","components/App/app.module.css","components/Filter/filter.module.css"],"names":["module","exports","FormInput","state","name","number","handleChange","e","target","Number","isNaN","value","PNotify","alert","setState","handleSubmit","preventDefault","contact","id","shortid","generate","onAddContact","props","this","onSubmit","className","styles","text_form","input_form","type","onChange","placeholder","btn_submit","Component","ContactList","contacts","onDelete","list","map","el","item","key","text","btn","onClick","Filter","input_filter","findToMatch","find","element","toLowerCase","App","filter","addContact","findContact","prevState","error","deleteContact","savedContacts","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","filters","includes","filterContacts","container","title","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1c17931d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_form\":\"contactForm_text_form__xeOZz\",\"input_form\":\"contactForm_input_form__2PXOH\",\"btn_submit\":\"contactForm_btn_submit__3NZbx\"};","import React, { Component } from 'react';\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport shortid from 'short-id';\nimport T from 'prop-types';\nimport styles from './contactForm.module.css';\nimport 'pnotify/dist/PNotifyBrightTheme.css';\n\nexport default class FormInput extends Component {\n  static propTypes = {\n    onAddContact: T.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    if (e.target.name === 'number' && Number.isNaN(Number(e.target.value))) {\n      PNotify.alert('Input only number');\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { number } = this.state;\n    if (number) {\n      const contact = {\n        id: shortid.generate(),\n        name: this.state.name,\n        number: this.state.number,\n      };\n      const { onAddContact } = this.props;\n\n      onAddContact(contact);\n\n      this.setState({\n        name: '',\n        number: '',\n      });\n    } else {\n      PNotify.alert('You have not entered a number');\n    }\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <p className={styles.text_form}>Name</p>\n          <input\n            className={styles.input_form}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            placeholder=\"Enter contact\"\n          />\n          <p className={styles.text_form}>Number</p>\n          <input\n            className={styles.input_form}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            placeholder=\"Enter number\"\n          />\n          <button className={styles.btn_submit} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './contactList.module.css';\n\nconst ContactList = ({ contacts, onDelete }) =>\n  contacts && (\n    <ul className={styles.list}>\n      {contacts.map(el => (\n        <li className={styles.item} key={el.id}>\n          <p className={styles.text}>\n            {el.name}: {el.number}\n          </p>\n          <button\n            className={styles.btn}\n            type=\"submit\"\n            onClick={() => onDelete(el.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n\nContactList.propTypes = {\n  contacts: T.arrayOf(T.shape({})).isRequired,\n  onDelete: T.func.isRequired,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <div>\n    <p>Find contacts by name</p>\n    <input\n      className={styles.input_filter}\n      type=\"text\"\n      value={value}\n      name=\"filter\"\n      placeholder=\"To find contact ...\"\n      onChange={onChange}\n    />\n  </div>\n);\n\nFilter.propTypes = {\n  value: T.string.isRequired,\n  onChange: T.func.isRequired,\n};\n\nexport default Filter;\n","const filterContacts = (contacts, filters) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filters.toLowerCase()),\n  );\n};\nconst findToMatch = (contacts, contact) => {\n  return contacts.find(\n    element => element.name.toLowerCase() === contact.name.toLowerCase(),\n  );\n};\n\nexport { filterContacts, findToMatch };\n","import React, { Component } from 'react';\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport styles from './app.module.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { filterContacts, findToMatch } from '../FilterContact/filterContact';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const savedContacts = localStorage.getItem('contacts');\n\n    if (savedContacts) {\n      const parsedContacts = JSON.parse(savedContacts);\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  addContact = contact => {\n    const findContact = findToMatch(this.state.contacts, contact);\n    if (contact.name) {\n      // eslint-disable-next-line no-unused-expressions\n      findContact\n        ? PNotify.alert(`${findContact.name} is already in contacts`)\n        : this.setState(prevState => ({\n            contacts: [...prevState.contacts, contact],\n          }));\n    } else {\n      PNotify.error({\n        text: \"'Input name!'\",\n      });\n    }\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const filteredContacts = filterContacts(contacts, filter);\n\n    return (\n      <div className={styles.container}>\n        <h1 className={styles.title}>Phonebook</h1>\n        <ContactForm\n          onChange={this.handleChange}\n          onAddContact={this.addContact}\n        />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.handleChange} />\n        <ContactList\n          contacts={filteredContacts}\n          onDelete={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__11rkL\",\"item\":\"contactList_item__1XMVQ\",\"text\":\"contactList_text__HcJsN\",\"btn\":\"contactList_btn__309E_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__1Xg6q\",\"title\":\"app_title__2gXVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_filter\":\"filter_input_filter__oEurF\"};"],"sourceRoot":""}